import { expect } from 'chai'
import type { NoiseSettings } from '../../src/worldgen'
import { NoiseSampler } from '../../src/worldgen'

describe('NoiseSampler', () => {
	const DELTA = 1e-5
	const setup = (seed: number, settings: Partial<NoiseSettings> = {}) => {
		const noiseSettings: NoiseSettings = {
			minY: 0,
			height: 128,
			densityFactor: 1,
			densityOffset: -0.5,
			xzSize: 1,
			ySize: 1,
			sampling: {
				xzScale: 1,
				yScale: 1,
				xzFactor: 80,
				yFactor: 320,
			},
			bottomSlide: { offset: 0, size: 0, target: 0 },
			topSlide: { offset: 0, size: 0, target: 0 },
			useSimplexSurfaceNoise: false,
			randomDensityOffset: false,
			islandNoiseOverride: false,
			isAmplified: false,
			useLegacyRandom: false,
			...settings,
		}
		const octaves = {
			temperature: { firstOctave: 0, amplitudes: [0] },
			humidity: { firstOctave: 0, amplitudes: [0] },
			continentalness: { firstOctave: 0, amplitudes: [0] },
			erosion: { firstOctave: 0, amplitudes: [0] },
			weirdness: { firstOctave: 0, amplitudes: [0] },
			shift: { firstOctave: 0, amplitudes: [0] },
		}
		const sampler = new NoiseSampler(4, 4, 32, noiseSettings, octaves, BigInt(seed), true)
		return { sampler }
	}
	it('sampleJaggedNoise', () => {
		const { sampler } = setup(123)
		
		expect(sampler.sampleJaggedNoise(0, 3, 2)).closeTo(0, DELTA)
		expect(sampler.sampleJaggedNoise(21, 3, 2)).closeTo(5.4066096667823045, DELTA)
		expect(sampler.sampleJaggedNoise(21, 4, 2)).closeTo(4.979821548788449, DELTA)
		expect(sampler.sampleJaggedNoise(27, 4, 2)).closeTo(6.402627705585148, DELTA)
	})
	it('computeDimensionDensity', () => {
		const { sampler } = setup(123, { height: 256, densityFactor: 1, densityOffset: 0 })

		expect(sampler.computeDimensionDensity(0)).equal(1)
		expect(sampler.computeDimensionDensity(32)).equal(0.75)
		expect(sampler.computeDimensionDensity(64)).equal(0.5)
		expect(sampler.computeDimensionDensity(128)).equal(0)
		expect(sampler.computeDimensionDensity(192)).equal(-0.5)
		expect(sampler.computeDimensionDensity(256)).equal(-1)
	})
	it('applySlides', () => {
		const { sampler } = setup(123, { bottomSlide: { offset: 0, size: 4, target: 0.234375 }, topSlide: { offset: 2, size: 5, target: -0.2265625 } })

		expect(sampler.applySlide(0.078125, 1)).equal(0.1953125)
		expect(sampler.applySlide(-0.03125, 31)).equal(-0.2265625)
		expect(sampler.applySlide(0.0625, 29)).equal(-0.16875)
	})
	it('noiseColumn', () => {
		const { sampler } = setup(123, { height: 256 })

		const actual = [...Array(65)].map((_, i) => sampler.calculateBaseNoise(3, i, 2, { offset: 0.03, factor: 0.7, jaggedness: 0 }))
		const expected = [1.65002679155681,1.62815179155681,1.6062767915568101,1.58440179155681,1.5653127774612114,1.5434377774612114,1.5215627774612113,1.4996877774612114,1.4754123361577995,1.4535373361577997,1.4316623361577996,1.4097873361577995,1.374851121676668,1.3529761216766678,1.331101121676668,1.3092261216766679,1.2651324651164522,1.2432574651164523,1.2213824651164522,1.1995074651164523,1.1454657285229992,1.1235907285229993,1.1017157285229993,1.0798407285229994,1.0517130631077067,1.0298380631077066,1.0079630631077068,0.9860880631077068,0.9187171104855386,0.8968421104855386,0.8749671104855385,0.8530921104855386,0.8067539960895114,0.7848789960895114,0.7630039960895114,0.7411289960895113,0.6844609593757022,0.6625859593757021,0.6407109593757021,0.6188359593757021,0.5808649591679453,0.5589899591679452,0.5371149591679452,0.5152399591679453,0.4550858057294941,0.4332108057294941,0.4113358057294941,0.3894608057294941,0.4402546495458997,0.4183796495458997,0.3965046495458997,0.37462964954589967,0.35605351008462666,0.3341785100846267,0.31230351008462665,0.29042851008462667,0.27385806210965813,0.25198306210965815,0.23010806210965815,0.20823306210965814,0.21007864097670415,0.18820364097670414,0.16632864097670416,0.14445364097670416,0.09681080212778503]
		actual.forEach((a, i) => {
			expect(a).closeTo(expected[i], 1e-3)
		})
	})
	it('noiseColumn (jaggedness)', () => {
		const { sampler } = setup(40163, { densityOffset: -0.5 })

		const actual = [...Array(129)].map((_, i) => sampler.calculateBaseNoise(240, i, 0, { offset: 0.7, factor: 1.5625, jaggedness: 1 }))
		const expected = [8.27516645685817,8.22633833185817,8.17751020685817,8.12868208185817,8.066236980342257,8.017408855342257,7.968580730342257,7.919752605342257,7.887527871494034,7.838699746494033,7.789871621494033,7.741043496494033,7.730038704548039,7.681210579548039,7.632382454548039,7.583554329548039,7.546896481352864,7.498068356352864,7.449240231352864,7.400412106352864,7.358780406071622,7.309952281071622,7.261124156071622,7.212296031071622,7.187442827232785,7.138614702232785,7.089786577232785,7.040958452232785,7.01265889282914,6.96383076782914,6.91500264282914,6.86617451782914,6.819024903697799,6.770196778697799,6.721368653697799,6.672540528697799,6.632415377196856,6.583587252196856,6.534759127196856,6.485931002196856,6.444205724725009,6.395377599725009,6.346549474725009,6.297721349725009,6.236765783415313,6.187937658415312,6.139109533415312,6.090281408415312,5.9509730114306025,5.9021448864306025,5.8533167614306025,5.8044886364306025,5.742561486717362,5.693733361717362,5.644905236717362,5.596077111717362,5.563053756071175,5.514225631071175,5.465397506071175,5.416569381071175,5.35965566227373,5.31082753727373,5.26199941227373,5.21317128727373,5.139376229389378,5.090548104389378,5.041719979389378,4.992891854389378,4.885873660327428,4.837045535327428,4.788217410327428,4.739389285327428,4.680282401746985,4.631454276746985,4.582626151746985,4.533798026746985,4.47207599629345,4.42324787129345,4.37441974629345,4.32559162129345,4.236616870576934,4.187788745576934,4.138960620576934,4.090132495576934,4.013365971086561,3.964537846086561,3.915709721086561,3.866881596086561,3.814926482372346,3.766098357372346,3.717270232372346,3.6684421073723463,3.6179485261123085,3.5691204011123085,3.5202922761123085,3.4714641511123085,3.44183831128324,3.39301018628324,3.34418206128324,3.29535393628324,3.325285074375864,3.276456949375864,3.227628824375864,3.178800699375864,3.09986109404572,3.05103296904572,3.00220484404572,2.95337671904572,2.8663042358124455,2.8174761108124455,2.7686479858124455,2.7198198608124455,2.6422898385271782,2.5934617135271782,2.5446335885271782,2.4958054635271782,2.4495409869572593,2.4007128619572593,2.3518847369572593,2.3030566119572593,2.2398671567165316,2.1910390317165316,2.1422109067165316,2.0933827817165316,2.0397570787529,1.9909289537529,1.9421008287529,1.8932727037529,1.820111468120124]
		actual.forEach((a, i) => {
			expect(a).closeTo(expected[i], 1e-3)
		})
	})
})
