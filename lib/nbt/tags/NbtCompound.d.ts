import type { JsonValue } from '../../util/index.js';
import { StringReader } from '../../util/index.js';
import type { DataInput, DataOutput } from '../io/index.js';
import type { NbtByte } from './NbtByte.js';
import { NbtByteArray } from './NbtByteArray.js';
import type { NbtDouble } from './NbtDouble.js';
import type { NbtFloat } from './NbtFloat.js';
import type { NbtInt } from './NbtInt.js';
import { NbtIntArray } from './NbtIntArray.js';
import { NbtList } from './NbtList.js';
import type { NbtLong } from './NbtLong.js';
import { NbtLongArray } from './NbtLongArray.js';
import type { NbtShort } from './NbtShort.js';
import type { NbtString } from './NbtString.js';
import { NbtTag } from './NbtTag.js';
import { NbtType } from './NbtType.js';
export declare class NbtCompound extends NbtTag {
    private readonly properties;
    constructor(properties?: Map<string, NbtTag>);
    getId(): NbtType;
    has(key: string): boolean;
    hasNumber(key: string): boolean;
    hasString(key: string): boolean;
    hasList(key: string, type?: number, length?: number): boolean;
    hasCompound(key: string): boolean;
    get(key: string): NbtTag | undefined;
    getString(key: string): string;
    getNumber(key: string): number;
    getBoolean(key: string): boolean;
    getList(key: string): NbtList;
    getList(key: string, type: 1): NbtList<NbtByte>;
    getList(key: string, type: 2): NbtList<NbtShort>;
    getList(key: string, type: 3): NbtList<NbtInt>;
    getList(key: string, type: 4): NbtList<NbtLong>;
    getList(key: string, type: 5): NbtList<NbtFloat>;
    getList(key: string, type: 6): NbtList<NbtDouble>;
    getList(key: string, type: 7): NbtList<NbtByteArray>;
    getList(key: string, type: 8): NbtList<NbtString>;
    getList(key: string, type: 9): NbtList<NbtList>;
    getList(key: string, type: 10): NbtList<NbtCompound>;
    getList(key: string, type: 11): NbtList<NbtIntArray>;
    getList(key: string, type: 12): NbtList<NbtLongArray>;
    getCompound(key: string): NbtCompound;
    getByteArray(key: string): NbtByteArray;
    getIntArray(key: string): NbtIntArray;
    getLongArray(key: string): NbtLongArray;
    keys(): IterableIterator<string>;
    get size(): number;
    map<U>(fn: (key: string, value: NbtTag, compound: this) => [string, U]): Record<string, U>;
    forEach(fn: (key: string, value: NbtTag, compound: this) => void): void;
    set(key: string, value: NbtTag): this;
    delete(key: string): boolean;
    clear(): this;
    toString(): string;
    toPrettyString(indent?: string, depth?: number): string;
    toSimplifiedJson(): Record<string, JsonValue>;
    toJson(): Record<string, {
        type: NbtType;
        value: JsonValue;
    }>;
    toBytes(output: DataOutput): void;
    static create(): NbtCompound;
    static fromString(reader: StringReader): NbtTag;
    static fromJson(value: JsonValue): NbtCompound;
    static fromBytes(input: DataInput): NbtCompound;
}
//# sourceMappingURL=NbtCompound.d.ts.map